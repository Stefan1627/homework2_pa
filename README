# Problem 1
---
# Stefan CALMAC 324CC
---

## Solution description
To reconstruct an undirected graph with N nodes such that the distances from node 1
coincide with the vector `v`, we observed that a tree in which each node at distance `d`
is connected to some node at distance `d-1` exactly fulfills the required condition.
Thus:
1. We read the vector `v[1..N]`.
2. We check the validity:
- `v[1]` must be 0 (node ​​1 is the source).
- For any i>1, `v[i]` cannot be 0 (another node with distance 0 is impossible).
3. We group the nodes into vectors `byDist[d]` by distance `d`.
4. For each distance `d>0` that has nodes, we ensure that there is at least
one node at distance `d-1`.
5. Build the edges: for each node `u` with distance `d`, add the edge
`(parent, u)`, where `parent` is the first node in `byDist[d-1]`.
6. If any of the above conditions is violated, print `-1`.

## Complexity
- **Time:** O(N) for reading, grouping, checks and edge building.
- **Memory:** O(N) for distance vectors and grouping.
- The number of resulting edges is at most N−1, so it meets the requirement of ≤10^6 edges.

## Additional considerations
- Choosing a single parent at each level guarantees a tree (no cycles),
sufficient to obtain exactly the given distances.
- The solution quickly detects (through checks on `byDist`) impossible cases
without building the graph in total.

# Problem 2

## Chosen Solution
We applied a **sliding-window** over the unique values ​​in the matrix, as follows:
1. Sort and extract the unique values ​​`vals[0..U-1]`.
2. Maintain a window of indices `[l, r)` in `vals` such that `vals[r-1] - vals[l] ≤ K`.
3. At each step, we mark with `allow[id] = 1` only the cells with values ​​in the window.
4. For each cell containing `vals[l]` (the current minimum value), we launch a BFS
flood-fill to determine the area of ​​the connected component in the marked matrix.
5. We keep the maximum of the areas found.

If `global_max - global_min ≤ K`, the entire grid is already a single area.

## Complexity
- **Time:**
- Sort + unique: `O(NM log(NM))`.
- Sliding window + BFSs: `O(U · NM)` in the worst case, with `U ≤ NM`.
- For `N,M ≤ 100`, `NM ≤ 10^4` results, and the algorithm is efficient.
- **Memory:** `O(NM)` for the matrix and auxiliary vectors (`allow`, `seen`, queue, `pos`).

## Remarks
- The BFS is implemented with a static queue for performance.
- The global check (`global_max - global_min`) avoids the trivial case in `O(NM)`.

# Problem 3

## Solution description
We transform the situation into a **state graph** in the space (time × position on the log):
- Each log `i` with `length[i]+1` positions `p=0…length[i]` corresponds to a flat index `s`.
- A state is a pair `(t, s)` = time `t` and position `s`.
- The transitions from `(t, s)` to `(t+1, s2)` represent the three possible actions:
1. **H** (wait): stay on the same `s`, cost `E1`.
2. **N/S/E/V** (step on log): `s→s±1`, cost `E2`, direction depends on orientation.
3. **J i** (jump on another log): from `(i,p)` to `(j,pj)`, if the absolute coordinates coincide, cost `E3`.
- Calculate the absolute position `(x,y)` of each state by cumulative derivation of the motion of each log.
- We use **dynamic programming** in time `dp[t][s]` = minimum energy up to `(t,s)`.
- The result is the minimum `dp[t][s]` for any `t≤T` where `(x,y)=(target_x,target_y)`.

## Complexity
- Number of states S = Σ(length[i]+1) ≤ O(N·L) (L = maximum length of any log).
- DP costs O(T × S × d), where in
- each state we relax O(1) steps and O(k) jumps,
- k = number of logs intersecting a position (on average small).
- For `N ≤ 80`, `T ≤ 400`, `L ≤ 1000`, the solution runs in bounds (≈10⁷–10⁸ operations).

## Remarks
- We used an `unordered_map` to quickly group states that intersect at the same point.
- The solution reconstructs the full path, not just the cost.
- The memory can be reduced by keeping only two layers of DP (t and t+1), but here we kept all `dp` for simple backtracking.